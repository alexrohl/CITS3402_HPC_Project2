$mpirun --hostfile hostfile -np 5 ./main

np <- number of processes

--- MASTER PROCESS ---
read matrix size

size <- matrix size
num_local_elements <- local number of elements = size/np
lo <- remaining elements after splitting = size - num*np

read matrix
convert zeros to infinity
convert diagonals to zeroes
----------------------

MPI_Bcast size
MPI_Bcast num_local_elements
MPI_Bcast lo

global_index = lo + np*pid
SCATTER matrix to sub_array


--- MASTER PROCESS ---
get leftovers <- matrix[0:lo]
----------------------

MPI_Bcast matrix

for iteration (k) in range(size):

    for local_index in range(num_local_elements):
        i (global row) <- (global_index + local_index)/size
        j (global col) <- (global_index + local_index)%size
        sub_array[local_index] = min(sub_array[local_index], matrix[i*size+k] + matrix[k*size+j])


    --- MASTER PROCESS ---
    for local_index in range(lo):
        i (global row) <- (global_index + local_index)/size
        j (global col) <- (global_index + local_index)%size
        leftovers[local_index] = min(leftovers[local_index], matrix[i*size+k] + matrix[k*size+j])
    ----------------------

    GATHER sub_array into matrix
    matrix append leftovers to front

    MPI_Bcast matrix

print matrix
















//ignore this...

    for local_index in range(num_local_elements):
        ### we compute A[i][j] = min(A[i][j], A[i][k] + A[k][j]) as follows###
        global row (i) <- (global_index + local_index)/size
        global col (j) <- (global_index + local_index)%size
        sub_array[local_index] = min(sub_array[local_index], kth_col[i] + kth_row[j])

        ### If element needs to be passed to build (k+1)row/col ###
        if i == k+1:
            #found row element
            SEND to master
                [0 j sub_array[local_index]] #0 means row elem

        if j == k+1:
            #found col element
            SEND to master
                [1 i sub_array[local_index]] #1 means col elem

    --- MASTER PROCESS ---
    #building the next row/col to be broadcasted
    for node in range(np):
        RECEIVE from slave[node]
            [isCol index value]

        if isCol:
            kth_col[index] = value
        else:
            kth_col[index] = value


#iterations complete so now merge sub arrays into one array
--- MASTER PROCESS ---
MPI_GATHER?
  sub_array


Print(resulting array)
